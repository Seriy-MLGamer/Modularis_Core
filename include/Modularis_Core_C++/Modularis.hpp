/*
(C) 2022-2024 Серый MLGamer. All freedoms preserved.
Дзен: <https://dzen.ru/seriy_mlgamer>
SoundCloud: <https://soundcloud.com/seriy_mlgamer>
YouTube: <https://www.youtube.com/@Seriy_MLGamer>
GitHub: <https://github.com/Seriy-MLGamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Modularis Core C++.
Modularis Core C++ is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Modularis Core C++ is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Modularis Core C++. If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

#include <cstdint>
#include <Modularis_Core_C++/modules/system/Output.hpp>
#include <Modularis_Core_C++/core/types/Sound_value.hpp>
#include <Modularis_Core_C++/ports/Sound.hpp>
#include <cstdlib>

namespace MDLRS
{
	struct Module;

	struct Modularis
	{
		uint32_t sample_rate; /**Sample rate of a sound stream.*/
		bool lazy_update; /**Don't update disconnected modules.*/
		Module **disconnected_modules; /**Modules that aren't connected to any module.*/
		uint32_t disconnected_modules_size; /**Size of an array.*/
		uint32_t disconnected_modules_count; /**Elements count in an array.*/
		Output output; /**Module for returning new frames of a sound stream.*/

		/**
		 * Create an instance of Modularis program generating a sound stream.
		 * @param sample_rate the sample rate of a sound stream.
		 * @param channels the number of channels in a stream.
		 */
		inline Modularis(uint32_t sample_rate, uint32_t channels);
		/**
		 * Update all modules in the Modularis project. If lazy_update field is true, then disconnected modules are excluded.
		 */
		void update();
		/**
		 * Get a value of sound frame generated by the update() method at the specified channel.
		 * @param channel
		 * @return a value of sound frame.
		 */
		inline Sound_value get(uint32_t channel);
		inline ~Modularis();
	};
	Modularis::Modularis(uint32_t sample_rate, uint32_t channels): output(this, channels)
	{
		this->sample_rate=sample_rate;
		lazy_update=true;
		disconnected_modules=NULL;
		disconnected_modules_size=0;
		disconnected_modules_count=0;
	}
	Sound_value Modularis::get(uint32_t channel)
	{
		return output.channels[channel].frame;
	}
	Modularis::~Modularis()
	{
		if (disconnected_modules) free(disconnected_modules);
	}
}