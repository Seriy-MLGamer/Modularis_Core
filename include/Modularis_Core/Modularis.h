/*
(C) 2022-2024 Серый MLGamer. All freedoms preserved.
Дзен: <https://dzen.ru/seriy_mlgamer>
SoundCloud: <https://soundcloud.com/seriy_mlgamer>
YouTube: <https://www.youtube.com/@Seriy_MLGamer>
GitHub: <https://github.com/Seriy-MLGamer>
E-mail: <Seriy-MLGamer@yandex.ru>

This file is part of Modularis Core.
Modularis Core is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Modularis Core is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Modularis Core. If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

#include <Modularis_Core/typedefs/Modularis.h>

#include <stdint.h>
#include <stdbool.h>
#include <Modularis_Core/typedefs/modules/system/Module.h>
#include <Modularis_Core/modules/system/Output.h>
#include <Modularis_Core/core/types/Sound_value.h>
#include <Modularis_Core/ports/Sound.h>
#include <stdlib.h>

struct MDLRS_Modularis
{
	uint32_t sample_rate; /**Sample rate of a sound stream.*/
	bool lazy_update; /**Don't update disconnected modules.*/
	MDLRS_Module **disconnected_modules; /**Modules that aren't connected to any module.*/
	uint32_t disconnected_modules_size; /**Size of an array.*/
	uint32_t disconnected_modules_count; /**Elements count in an array.*/
	MDLRS_Output output; /**Module for returning new frames of a sound stream.*/
};
/**
 * Create an instance of Modularis program generating a sound stream.
 * @param self
 * @param sample_rate the sample rate of a sound stream.
 * @param channels the number of channels in a stream.
 */
inline void MDLRS_Modularis_new(MDLRS_Modularis *self, uint32_t sample_rate, uint32_t channels)
{
	self->sample_rate=sample_rate;
	self->lazy_update=true;
	self->disconnected_modules=NULL;
	self->disconnected_modules_size=0;
	self->disconnected_modules_count=0;
	MDLRS_Output_new(&self->output, self, channels);
}
/**
 * Update all modules in the Modularis project. If lazy_update field is true, then disconnected modules are excluded.
 * @param self
 */
void MDLRS_Modularis_update(MDLRS_Modularis *self);
/**
 * Get a value of sound frame generated by the update() method at the specified channel.
 * @param self
 * @param channel
 * @return a value of sound frame.
 */
inline MDLRS_Sound_value MDLRS_Modularis_get(MDLRS_Modularis *self, uint32_t channel)
{
	return self->output.channels[channel].frame;
}
inline void MDLRS_Modularis_remove(MDLRS_Modularis *self)
{
	if (self->disconnected_modules) free(self->disconnected_modules);
	MDLRS_Output_remove(&self->output);
}